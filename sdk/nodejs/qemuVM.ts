// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class QemuVM extends pulumi.CustomResource {
    /**
     * Get an existing QemuVM resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QemuVMState, opts?: pulumi.CustomResourceOptions): QemuVM {
        return new QemuVM(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmox:index/qemuVM:QemuVM';

    /**
     * Returns true if the given object is an instance of QemuVM.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is QemuVM {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QemuVM.__pulumiType;
    }

    /**
     * @deprecated do not use anymore
     */
    public readonly additionalWait!: pulumi.Output<number | undefined>;
    public readonly agent!: pulumi.Output<number | undefined>;
    public readonly args!: pulumi.Output<string | undefined>;
    /**
     * Automatically reboot the VM if any of the modified parameters require a reboot to take effect.
     */
    public readonly automaticReboot!: pulumi.Output<boolean | undefined>;
    public readonly balloon!: pulumi.Output<number | undefined>;
    /**
     * The VM bios, it can be seabios or ovmf
     */
    public readonly bios!: pulumi.Output<string | undefined>;
    /**
     * Boot order of the VM
     */
    public readonly boot!: pulumi.Output<string | undefined>;
    public readonly bootdisk!: pulumi.Output<string>;
    /**
     * @deprecated Use `network.bridge` instead
     */
    public readonly bridge!: pulumi.Output<string | undefined>;
    public readonly ciWait!: pulumi.Output<number | undefined>;
    public readonly cicustom!: pulumi.Output<string | undefined>;
    public readonly cipassword!: pulumi.Output<string | undefined>;
    public readonly ciuser!: pulumi.Output<string | undefined>;
    public readonly clone!: pulumi.Output<string | undefined>;
    /**
     * @deprecated do not use anymore
     */
    public readonly cloneWait!: pulumi.Output<number | undefined>;
    public readonly cloudinitCdromStorage!: pulumi.Output<string | undefined>;
    public readonly cores!: pulumi.Output<number | undefined>;
    public readonly cpu!: pulumi.Output<string | undefined>;
    /**
     * Use to track vm ipv4 address
     */
    public /*out*/ readonly defaultIpv4Address!: pulumi.Output<string>;
    public readonly defineConnectionInfo!: pulumi.Output<boolean | undefined>;
    /**
     * The VM description
     */
    public readonly desc!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Use `disk.size` instead
     */
    public readonly diskGb!: pulumi.Output<number | undefined>;
    public readonly disks!: pulumi.Output<outputs.QemuVMDisk[] | undefined>;
    public readonly forceCreate!: pulumi.Output<boolean | undefined>;
    public readonly forceRecreateOnChangeOf!: pulumi.Output<string | undefined>;
    public readonly fullClone!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Use custom per-resource timeout instead. See https://www.terraform.io/docs/language/resources/syntax.html#operation-timeouts
     */
    public readonly guestAgentReadyTimeout!: pulumi.Output<number | undefined>;
    public readonly hagroup!: pulumi.Output<string | undefined>;
    public readonly hastate!: pulumi.Output<string | undefined>;
    public readonly hotplug!: pulumi.Output<string | undefined>;
    public readonly ipconfig0!: pulumi.Output<string | undefined>;
    public readonly ipconfig1!: pulumi.Output<string | undefined>;
    public readonly ipconfig2!: pulumi.Output<string | undefined>;
    public readonly ipconfig3!: pulumi.Output<string | undefined>;
    public readonly ipconfig4!: pulumi.Output<string | undefined>;
    public readonly ipconfig5!: pulumi.Output<string | undefined>;
    public readonly iso!: pulumi.Output<string | undefined>;
    public readonly kvm!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Use `network.macaddr` to access the auto generated MAC address
     */
    public readonly mac!: pulumi.Output<string | undefined>;
    public readonly memory!: pulumi.Output<number | undefined>;
    /**
     * The VM name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly nameserver!: pulumi.Output<string>;
    public readonly networks!: pulumi.Output<outputs.QemuVMNetwork[] | undefined>;
    /**
     * @deprecated Use `network` instead
     */
    public readonly nic!: pulumi.Output<string | undefined>;
    public readonly numa!: pulumi.Output<boolean | undefined>;
    /**
     * VM autostart on boot
     */
    public readonly onboot!: pulumi.Output<boolean | undefined>;
    /**
     * VM autostart on create
     */
    public readonly oncreate!: pulumi.Output<boolean | undefined>;
    public readonly osNetworkConfig!: pulumi.Output<string | undefined>;
    public readonly osType!: pulumi.Output<string | undefined>;
    public readonly pool!: pulumi.Output<string | undefined>;
    /**
     * @deprecated do not use anymore
     */
    public readonly preprovision!: pulumi.Output<boolean | undefined>;
    public readonly qemuOs!: pulumi.Output<string | undefined>;
    /**
     * Internal variable, true if any of the modified parameters require a reboot to take effect.
     */
    public /*out*/ readonly rebootRequired!: pulumi.Output<boolean>;
    public readonly scsihw!: pulumi.Output<string>;
    public readonly searchdomain!: pulumi.Output<string>;
    public readonly serials!: pulumi.Output<outputs.QemuVMSerial[] | undefined>;
    public readonly sockets!: pulumi.Output<number | undefined>;
    /**
     * Use to pass instance ip address, redundant
     */
    public readonly sshForwardIp!: pulumi.Output<string | undefined>;
    public /*out*/ readonly sshHost!: pulumi.Output<string>;
    public /*out*/ readonly sshPort!: pulumi.Output<string>;
    public readonly sshPrivateKey!: pulumi.Output<string | undefined>;
    public readonly sshUser!: pulumi.Output<string | undefined>;
    public readonly sshkeys!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Use `disk.storage` instead
     */
    public readonly storage!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Use `disk.type` instead
     */
    public readonly storageType!: pulumi.Output<string | undefined>;
    /**
     * Enable tablet mode in the VM
     */
    public readonly tablet!: pulumi.Output<boolean | undefined>;
    public readonly tags!: pulumi.Output<string | undefined>;
    /**
     * The node where VM goes to
     */
    public readonly targetNode!: pulumi.Output<string>;
    /**
     * Record unused disks in proxmox. This is intended to be read-only for now.
     */
    public /*out*/ readonly unusedDisks!: pulumi.Output<outputs.QemuVMUnusedDisk[]>;
    public readonly vcpus!: pulumi.Output<number | undefined>;
    public readonly vgas!: pulumi.Output<outputs.QemuVMVga[] | undefined>;
    /**
     * @deprecated Use `network.tag` instead
     */
    public readonly vlan!: pulumi.Output<number | undefined>;
    /**
     * The VM identifier in proxmox (100-999999999)
     */
    public readonly vmid!: pulumi.Output<number>;

    /**
     * Create a QemuVM resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QemuVMArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QemuVMArgs | QemuVMState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QemuVMState | undefined;
            resourceInputs["additionalWait"] = state ? state.additionalWait : undefined;
            resourceInputs["agent"] = state ? state.agent : undefined;
            resourceInputs["args"] = state ? state.args : undefined;
            resourceInputs["automaticReboot"] = state ? state.automaticReboot : undefined;
            resourceInputs["balloon"] = state ? state.balloon : undefined;
            resourceInputs["bios"] = state ? state.bios : undefined;
            resourceInputs["boot"] = state ? state.boot : undefined;
            resourceInputs["bootdisk"] = state ? state.bootdisk : undefined;
            resourceInputs["bridge"] = state ? state.bridge : undefined;
            resourceInputs["ciWait"] = state ? state.ciWait : undefined;
            resourceInputs["cicustom"] = state ? state.cicustom : undefined;
            resourceInputs["cipassword"] = state ? state.cipassword : undefined;
            resourceInputs["ciuser"] = state ? state.ciuser : undefined;
            resourceInputs["clone"] = state ? state.clone : undefined;
            resourceInputs["cloneWait"] = state ? state.cloneWait : undefined;
            resourceInputs["cloudinitCdromStorage"] = state ? state.cloudinitCdromStorage : undefined;
            resourceInputs["cores"] = state ? state.cores : undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["defaultIpv4Address"] = state ? state.defaultIpv4Address : undefined;
            resourceInputs["defineConnectionInfo"] = state ? state.defineConnectionInfo : undefined;
            resourceInputs["desc"] = state ? state.desc : undefined;
            resourceInputs["diskGb"] = state ? state.diskGb : undefined;
            resourceInputs["disks"] = state ? state.disks : undefined;
            resourceInputs["forceCreate"] = state ? state.forceCreate : undefined;
            resourceInputs["forceRecreateOnChangeOf"] = state ? state.forceRecreateOnChangeOf : undefined;
            resourceInputs["fullClone"] = state ? state.fullClone : undefined;
            resourceInputs["guestAgentReadyTimeout"] = state ? state.guestAgentReadyTimeout : undefined;
            resourceInputs["hagroup"] = state ? state.hagroup : undefined;
            resourceInputs["hastate"] = state ? state.hastate : undefined;
            resourceInputs["hotplug"] = state ? state.hotplug : undefined;
            resourceInputs["ipconfig0"] = state ? state.ipconfig0 : undefined;
            resourceInputs["ipconfig1"] = state ? state.ipconfig1 : undefined;
            resourceInputs["ipconfig2"] = state ? state.ipconfig2 : undefined;
            resourceInputs["ipconfig3"] = state ? state.ipconfig3 : undefined;
            resourceInputs["ipconfig4"] = state ? state.ipconfig4 : undefined;
            resourceInputs["ipconfig5"] = state ? state.ipconfig5 : undefined;
            resourceInputs["iso"] = state ? state.iso : undefined;
            resourceInputs["kvm"] = state ? state.kvm : undefined;
            resourceInputs["mac"] = state ? state.mac : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameserver"] = state ? state.nameserver : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["nic"] = state ? state.nic : undefined;
            resourceInputs["numa"] = state ? state.numa : undefined;
            resourceInputs["onboot"] = state ? state.onboot : undefined;
            resourceInputs["oncreate"] = state ? state.oncreate : undefined;
            resourceInputs["osNetworkConfig"] = state ? state.osNetworkConfig : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["pool"] = state ? state.pool : undefined;
            resourceInputs["preprovision"] = state ? state.preprovision : undefined;
            resourceInputs["qemuOs"] = state ? state.qemuOs : undefined;
            resourceInputs["rebootRequired"] = state ? state.rebootRequired : undefined;
            resourceInputs["scsihw"] = state ? state.scsihw : undefined;
            resourceInputs["searchdomain"] = state ? state.searchdomain : undefined;
            resourceInputs["serials"] = state ? state.serials : undefined;
            resourceInputs["sockets"] = state ? state.sockets : undefined;
            resourceInputs["sshForwardIp"] = state ? state.sshForwardIp : undefined;
            resourceInputs["sshHost"] = state ? state.sshHost : undefined;
            resourceInputs["sshPort"] = state ? state.sshPort : undefined;
            resourceInputs["sshPrivateKey"] = state ? state.sshPrivateKey : undefined;
            resourceInputs["sshUser"] = state ? state.sshUser : undefined;
            resourceInputs["sshkeys"] = state ? state.sshkeys : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["tablet"] = state ? state.tablet : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetNode"] = state ? state.targetNode : undefined;
            resourceInputs["unusedDisks"] = state ? state.unusedDisks : undefined;
            resourceInputs["vcpus"] = state ? state.vcpus : undefined;
            resourceInputs["vgas"] = state ? state.vgas : undefined;
            resourceInputs["vlan"] = state ? state.vlan : undefined;
            resourceInputs["vmid"] = state ? state.vmid : undefined;
        } else {
            const args = argsOrState as QemuVMArgs | undefined;
            if ((!args || args.targetNode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetNode'");
            }
            resourceInputs["additionalWait"] = args ? args.additionalWait : undefined;
            resourceInputs["agent"] = args ? args.agent : undefined;
            resourceInputs["args"] = args ? args.args : undefined;
            resourceInputs["automaticReboot"] = args ? args.automaticReboot : undefined;
            resourceInputs["balloon"] = args ? args.balloon : undefined;
            resourceInputs["bios"] = args ? args.bios : undefined;
            resourceInputs["boot"] = args ? args.boot : undefined;
            resourceInputs["bootdisk"] = args ? args.bootdisk : undefined;
            resourceInputs["bridge"] = args ? args.bridge : undefined;
            resourceInputs["ciWait"] = args ? args.ciWait : undefined;
            resourceInputs["cicustom"] = args ? args.cicustom : undefined;
            resourceInputs["cipassword"] = args ? args.cipassword : undefined;
            resourceInputs["ciuser"] = args ? args.ciuser : undefined;
            resourceInputs["clone"] = args ? args.clone : undefined;
            resourceInputs["cloneWait"] = args ? args.cloneWait : undefined;
            resourceInputs["cloudinitCdromStorage"] = args ? args.cloudinitCdromStorage : undefined;
            resourceInputs["cores"] = args ? args.cores : undefined;
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["defineConnectionInfo"] = args ? args.defineConnectionInfo : undefined;
            resourceInputs["desc"] = args ? args.desc : undefined;
            resourceInputs["diskGb"] = args ? args.diskGb : undefined;
            resourceInputs["disks"] = args ? args.disks : undefined;
            resourceInputs["forceCreate"] = args ? args.forceCreate : undefined;
            resourceInputs["forceRecreateOnChangeOf"] = args ? args.forceRecreateOnChangeOf : undefined;
            resourceInputs["fullClone"] = args ? args.fullClone : undefined;
            resourceInputs["guestAgentReadyTimeout"] = args ? args.guestAgentReadyTimeout : undefined;
            resourceInputs["hagroup"] = args ? args.hagroup : undefined;
            resourceInputs["hastate"] = args ? args.hastate : undefined;
            resourceInputs["hotplug"] = args ? args.hotplug : undefined;
            resourceInputs["ipconfig0"] = args ? args.ipconfig0 : undefined;
            resourceInputs["ipconfig1"] = args ? args.ipconfig1 : undefined;
            resourceInputs["ipconfig2"] = args ? args.ipconfig2 : undefined;
            resourceInputs["ipconfig3"] = args ? args.ipconfig3 : undefined;
            resourceInputs["ipconfig4"] = args ? args.ipconfig4 : undefined;
            resourceInputs["ipconfig5"] = args ? args.ipconfig5 : undefined;
            resourceInputs["iso"] = args ? args.iso : undefined;
            resourceInputs["kvm"] = args ? args.kvm : undefined;
            resourceInputs["mac"] = args ? args.mac : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameserver"] = args ? args.nameserver : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["nic"] = args ? args.nic : undefined;
            resourceInputs["numa"] = args ? args.numa : undefined;
            resourceInputs["onboot"] = args ? args.onboot : undefined;
            resourceInputs["oncreate"] = args ? args.oncreate : undefined;
            resourceInputs["osNetworkConfig"] = args ? args.osNetworkConfig : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["pool"] = args ? args.pool : undefined;
            resourceInputs["preprovision"] = args ? args.preprovision : undefined;
            resourceInputs["qemuOs"] = args ? args.qemuOs : undefined;
            resourceInputs["scsihw"] = args ? args.scsihw : undefined;
            resourceInputs["searchdomain"] = args ? args.searchdomain : undefined;
            resourceInputs["serials"] = args ? args.serials : undefined;
            resourceInputs["sockets"] = args ? args.sockets : undefined;
            resourceInputs["sshForwardIp"] = args ? args.sshForwardIp : undefined;
            resourceInputs["sshPrivateKey"] = args ? args.sshPrivateKey : undefined;
            resourceInputs["sshUser"] = args ? args.sshUser : undefined;
            resourceInputs["sshkeys"] = args ? args.sshkeys : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["tablet"] = args ? args.tablet : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetNode"] = args ? args.targetNode : undefined;
            resourceInputs["vcpus"] = args ? args.vcpus : undefined;
            resourceInputs["vgas"] = args ? args.vgas : undefined;
            resourceInputs["vlan"] = args ? args.vlan : undefined;
            resourceInputs["vmid"] = args ? args.vmid : undefined;
            resourceInputs["defaultIpv4Address"] = undefined /*out*/;
            resourceInputs["rebootRequired"] = undefined /*out*/;
            resourceInputs["sshHost"] = undefined /*out*/;
            resourceInputs["sshPort"] = undefined /*out*/;
            resourceInputs["unusedDisks"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(QemuVM.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering QemuVM resources.
 */
export interface QemuVMState {
    /**
     * @deprecated do not use anymore
     */
    additionalWait?: pulumi.Input<number>;
    agent?: pulumi.Input<number>;
    args?: pulumi.Input<string>;
    /**
     * Automatically reboot the VM if any of the modified parameters require a reboot to take effect.
     */
    automaticReboot?: pulumi.Input<boolean>;
    balloon?: pulumi.Input<number>;
    /**
     * The VM bios, it can be seabios or ovmf
     */
    bios?: pulumi.Input<string>;
    /**
     * Boot order of the VM
     */
    boot?: pulumi.Input<string>;
    bootdisk?: pulumi.Input<string>;
    /**
     * @deprecated Use `network.bridge` instead
     */
    bridge?: pulumi.Input<string>;
    ciWait?: pulumi.Input<number>;
    cicustom?: pulumi.Input<string>;
    cipassword?: pulumi.Input<string>;
    ciuser?: pulumi.Input<string>;
    clone?: pulumi.Input<string>;
    /**
     * @deprecated do not use anymore
     */
    cloneWait?: pulumi.Input<number>;
    cloudinitCdromStorage?: pulumi.Input<string>;
    cores?: pulumi.Input<number>;
    cpu?: pulumi.Input<string>;
    /**
     * Use to track vm ipv4 address
     */
    defaultIpv4Address?: pulumi.Input<string>;
    defineConnectionInfo?: pulumi.Input<boolean>;
    /**
     * The VM description
     */
    desc?: pulumi.Input<string>;
    /**
     * @deprecated Use `disk.size` instead
     */
    diskGb?: pulumi.Input<number>;
    disks?: pulumi.Input<pulumi.Input<inputs.QemuVMDisk>[]>;
    forceCreate?: pulumi.Input<boolean>;
    forceRecreateOnChangeOf?: pulumi.Input<string>;
    fullClone?: pulumi.Input<boolean>;
    /**
     * @deprecated Use custom per-resource timeout instead. See https://www.terraform.io/docs/language/resources/syntax.html#operation-timeouts
     */
    guestAgentReadyTimeout?: pulumi.Input<number>;
    hagroup?: pulumi.Input<string>;
    hastate?: pulumi.Input<string>;
    hotplug?: pulumi.Input<string>;
    ipconfig0?: pulumi.Input<string>;
    ipconfig1?: pulumi.Input<string>;
    ipconfig2?: pulumi.Input<string>;
    ipconfig3?: pulumi.Input<string>;
    ipconfig4?: pulumi.Input<string>;
    ipconfig5?: pulumi.Input<string>;
    iso?: pulumi.Input<string>;
    kvm?: pulumi.Input<boolean>;
    /**
     * @deprecated Use `network.macaddr` to access the auto generated MAC address
     */
    mac?: pulumi.Input<string>;
    memory?: pulumi.Input<number>;
    /**
     * The VM name
     */
    name?: pulumi.Input<string>;
    nameserver?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.QemuVMNetwork>[]>;
    /**
     * @deprecated Use `network` instead
     */
    nic?: pulumi.Input<string>;
    numa?: pulumi.Input<boolean>;
    /**
     * VM autostart on boot
     */
    onboot?: pulumi.Input<boolean>;
    /**
     * VM autostart on create
     */
    oncreate?: pulumi.Input<boolean>;
    osNetworkConfig?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    pool?: pulumi.Input<string>;
    /**
     * @deprecated do not use anymore
     */
    preprovision?: pulumi.Input<boolean>;
    qemuOs?: pulumi.Input<string>;
    /**
     * Internal variable, true if any of the modified parameters require a reboot to take effect.
     */
    rebootRequired?: pulumi.Input<boolean>;
    scsihw?: pulumi.Input<string>;
    searchdomain?: pulumi.Input<string>;
    serials?: pulumi.Input<pulumi.Input<inputs.QemuVMSerial>[]>;
    sockets?: pulumi.Input<number>;
    /**
     * Use to pass instance ip address, redundant
     */
    sshForwardIp?: pulumi.Input<string>;
    sshHost?: pulumi.Input<string>;
    sshPort?: pulumi.Input<string>;
    sshPrivateKey?: pulumi.Input<string>;
    sshUser?: pulumi.Input<string>;
    sshkeys?: pulumi.Input<string>;
    /**
     * @deprecated Use `disk.storage` instead
     */
    storage?: pulumi.Input<string>;
    /**
     * @deprecated Use `disk.type` instead
     */
    storageType?: pulumi.Input<string>;
    /**
     * Enable tablet mode in the VM
     */
    tablet?: pulumi.Input<boolean>;
    tags?: pulumi.Input<string>;
    /**
     * The node where VM goes to
     */
    targetNode?: pulumi.Input<string>;
    /**
     * Record unused disks in proxmox. This is intended to be read-only for now.
     */
    unusedDisks?: pulumi.Input<pulumi.Input<inputs.QemuVMUnusedDisk>[]>;
    vcpus?: pulumi.Input<number>;
    vgas?: pulumi.Input<pulumi.Input<inputs.QemuVMVga>[]>;
    /**
     * @deprecated Use `network.tag` instead
     */
    vlan?: pulumi.Input<number>;
    /**
     * The VM identifier in proxmox (100-999999999)
     */
    vmid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a QemuVM resource.
 */
export interface QemuVMArgs {
    /**
     * @deprecated do not use anymore
     */
    additionalWait?: pulumi.Input<number>;
    agent?: pulumi.Input<number>;
    args?: pulumi.Input<string>;
    /**
     * Automatically reboot the VM if any of the modified parameters require a reboot to take effect.
     */
    automaticReboot?: pulumi.Input<boolean>;
    balloon?: pulumi.Input<number>;
    /**
     * The VM bios, it can be seabios or ovmf
     */
    bios?: pulumi.Input<string>;
    /**
     * Boot order of the VM
     */
    boot?: pulumi.Input<string>;
    bootdisk?: pulumi.Input<string>;
    /**
     * @deprecated Use `network.bridge` instead
     */
    bridge?: pulumi.Input<string>;
    ciWait?: pulumi.Input<number>;
    cicustom?: pulumi.Input<string>;
    cipassword?: pulumi.Input<string>;
    ciuser?: pulumi.Input<string>;
    clone?: pulumi.Input<string>;
    /**
     * @deprecated do not use anymore
     */
    cloneWait?: pulumi.Input<number>;
    cloudinitCdromStorage?: pulumi.Input<string>;
    cores?: pulumi.Input<number>;
    cpu?: pulumi.Input<string>;
    defineConnectionInfo?: pulumi.Input<boolean>;
    /**
     * The VM description
     */
    desc?: pulumi.Input<string>;
    /**
     * @deprecated Use `disk.size` instead
     */
    diskGb?: pulumi.Input<number>;
    disks?: pulumi.Input<pulumi.Input<inputs.QemuVMDisk>[]>;
    forceCreate?: pulumi.Input<boolean>;
    forceRecreateOnChangeOf?: pulumi.Input<string>;
    fullClone?: pulumi.Input<boolean>;
    /**
     * @deprecated Use custom per-resource timeout instead. See https://www.terraform.io/docs/language/resources/syntax.html#operation-timeouts
     */
    guestAgentReadyTimeout?: pulumi.Input<number>;
    hagroup?: pulumi.Input<string>;
    hastate?: pulumi.Input<string>;
    hotplug?: pulumi.Input<string>;
    ipconfig0?: pulumi.Input<string>;
    ipconfig1?: pulumi.Input<string>;
    ipconfig2?: pulumi.Input<string>;
    ipconfig3?: pulumi.Input<string>;
    ipconfig4?: pulumi.Input<string>;
    ipconfig5?: pulumi.Input<string>;
    iso?: pulumi.Input<string>;
    kvm?: pulumi.Input<boolean>;
    /**
     * @deprecated Use `network.macaddr` to access the auto generated MAC address
     */
    mac?: pulumi.Input<string>;
    memory?: pulumi.Input<number>;
    /**
     * The VM name
     */
    name?: pulumi.Input<string>;
    nameserver?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.QemuVMNetwork>[]>;
    /**
     * @deprecated Use `network` instead
     */
    nic?: pulumi.Input<string>;
    numa?: pulumi.Input<boolean>;
    /**
     * VM autostart on boot
     */
    onboot?: pulumi.Input<boolean>;
    /**
     * VM autostart on create
     */
    oncreate?: pulumi.Input<boolean>;
    osNetworkConfig?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    pool?: pulumi.Input<string>;
    /**
     * @deprecated do not use anymore
     */
    preprovision?: pulumi.Input<boolean>;
    qemuOs?: pulumi.Input<string>;
    scsihw?: pulumi.Input<string>;
    searchdomain?: pulumi.Input<string>;
    serials?: pulumi.Input<pulumi.Input<inputs.QemuVMSerial>[]>;
    sockets?: pulumi.Input<number>;
    /**
     * Use to pass instance ip address, redundant
     */
    sshForwardIp?: pulumi.Input<string>;
    sshPrivateKey?: pulumi.Input<string>;
    sshUser?: pulumi.Input<string>;
    sshkeys?: pulumi.Input<string>;
    /**
     * @deprecated Use `disk.storage` instead
     */
    storage?: pulumi.Input<string>;
    /**
     * @deprecated Use `disk.type` instead
     */
    storageType?: pulumi.Input<string>;
    /**
     * Enable tablet mode in the VM
     */
    tablet?: pulumi.Input<boolean>;
    tags?: pulumi.Input<string>;
    /**
     * The node where VM goes to
     */
    targetNode: pulumi.Input<string>;
    vcpus?: pulumi.Input<number>;
    vgas?: pulumi.Input<pulumi.Input<inputs.QemuVMVga>[]>;
    /**
     * @deprecated Use `network.tag` instead
     */
    vlan?: pulumi.Input<number>;
    /**
     * The VM identifier in proxmox (100-999999999)
     */
    vmid?: pulumi.Input<number>;
}
