{
    "name": "proxmox",
    "description": "A Pulumi package for creating and managing proxmox cloud resources.",
    "keywords": [
        "pulumi",
        "proxmox",
        "category/cloud"
    ],
    "homepage": "https://beyondcloud.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`proxmox` Terraform Provider](https://github.com/terraform-providers/terraform-provider-proxmox).",
    "repository": "https://github.com/beyondcloud-co/pulumi-proxmox",
    "publisher": "Pulumi",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "pmApiTokenId": {
                "type": "string",
                "description": "API TokenID e.g. root@pam!mytesttoken\n"
            },
            "pmApiTokenSecret": {
                "type": "string",
                "description": "The secret uuid corresponding to a TokenID\n"
            },
            "pmApiUrl": {
                "type": "string",
                "description": "https://host.fqdn:8006/api2/json\n"
            },
            "pmDangerouslyIgnoreUnknownAttributes": {
                "type": "boolean",
                "description": "By default this provider will exit if an unknown attribute is found. This is to prevent the accidential destruction of\nVMs or Data when something in the proxmox API has changed/updated and is not confirmed to work with this provider. Set\nthis to true at your own risk. It may allow you to proceed in cases when the provider refuses to work, but be aware of\nthe danger in doing so.\n"
            },
            "pmDebug": {
                "type": "boolean",
                "description": "Enable or disable the verbose debug output from proxmox api\n"
            },
            "pmLogEnable": {
                "type": "boolean",
                "description": "Enable provider logging to get proxmox API logs\n"
            },
            "pmLogFile": {
                "type": "string",
                "description": "Write logs to this specific file\n"
            },
            "pmLogLevels": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "pulumi.json#/Any"
                },
                "description": "Configure the logging level to display; trace, debug, info, warn, etc\n"
            },
            "pmOtp": {
                "type": "string",
                "description": "OTP 2FA code (if required)\n"
            },
            "pmParallel": {
                "type": "integer"
            },
            "pmPassword": {
                "type": "string",
                "description": "Password to authenticate into proxmox\n"
            },
            "pmProxyServer": {
                "type": "string",
                "description": "Proxy Server passed to Api client(useful for debugging). Syntax: http://proxy:port\n"
            },
            "pmTimeout": {
                "type": "integer",
                "description": "How much second to wait for operations for both provider and api-client, default is 300s\n"
            },
            "pmTlsInsecure": {
                "type": "boolean",
                "description": "By default, every TLS connection is verified to be secure. This option allows terraform to proceed and operate on\nservers considered insecure. For example if you're connecting to a remote host and you do not have the CA cert that\nissued the proxmox api url's certificate.\n"
            },
            "pmUser": {
                "type": "string",
                "description": "Username e.g. myuser or myuser@pam\n"
            }
        },
        "defaults": [
            "pmApiUrl"
        ]
    },
    "provider": {
        "description": "The provider type for the proxmox package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "pmApiTokenId": {
                "type": "string",
                "description": "API TokenID e.g. root@pam!mytesttoken\n"
            },
            "pmApiTokenSecret": {
                "type": "string",
                "description": "The secret uuid corresponding to a TokenID\n"
            },
            "pmApiUrl": {
                "type": "string",
                "description": "https://host.fqdn:8006/api2/json\n"
            },
            "pmDangerouslyIgnoreUnknownAttributes": {
                "type": "boolean",
                "description": "By default this provider will exit if an unknown attribute is found. This is to prevent the accidential destruction of\nVMs or Data when something in the proxmox API has changed/updated and is not confirmed to work with this provider. Set\nthis to true at your own risk. It may allow you to proceed in cases when the provider refuses to work, but be aware of\nthe danger in doing so.\n"
            },
            "pmDebug": {
                "type": "boolean",
                "description": "Enable or disable the verbose debug output from proxmox api\n"
            },
            "pmLogEnable": {
                "type": "boolean",
                "description": "Enable provider logging to get proxmox API logs\n"
            },
            "pmLogFile": {
                "type": "string",
                "description": "Write logs to this specific file\n"
            },
            "pmLogLevels": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "pulumi.json#/Any"
                },
                "description": "Configure the logging level to display; trace, debug, info, warn, etc\n"
            },
            "pmOtp": {
                "type": "string",
                "description": "OTP 2FA code (if required)\n"
            },
            "pmParallel": {
                "type": "integer"
            },
            "pmPassword": {
                "type": "string",
                "description": "Password to authenticate into proxmox\n"
            },
            "pmProxyServer": {
                "type": "string",
                "description": "Proxy Server passed to Api client(useful for debugging). Syntax: http://proxy:port\n"
            },
            "pmTimeout": {
                "type": "integer",
                "description": "How much second to wait for operations for both provider and api-client, default is 300s\n"
            },
            "pmTlsInsecure": {
                "type": "boolean",
                "description": "By default, every TLS connection is verified to be secure. This option allows terraform to proceed and operate on\nservers considered insecure. For example if you're connecting to a remote host and you do not have the CA cert that\nissued the proxmox api url's certificate.\n"
            },
            "pmUser": {
                "type": "string",
                "description": "Username e.g. myuser or myuser@pam\n"
            }
        },
        "required": [
            "pmApiUrl"
        ],
        "inputProperties": {
            "pmApiTokenId": {
                "type": "string",
                "description": "API TokenID e.g. root@pam!mytesttoken\n"
            },
            "pmApiTokenSecret": {
                "type": "string",
                "description": "The secret uuid corresponding to a TokenID\n"
            },
            "pmApiUrl": {
                "type": "string",
                "description": "https://host.fqdn:8006/api2/json\n"
            },
            "pmDangerouslyIgnoreUnknownAttributes": {
                "type": "boolean",
                "description": "By default this provider will exit if an unknown attribute is found. This is to prevent the accidential destruction of\nVMs or Data when something in the proxmox API has changed/updated and is not confirmed to work with this provider. Set\nthis to true at your own risk. It may allow you to proceed in cases when the provider refuses to work, but be aware of\nthe danger in doing so.\n"
            },
            "pmDebug": {
                "type": "boolean",
                "description": "Enable or disable the verbose debug output from proxmox api\n"
            },
            "pmLogEnable": {
                "type": "boolean",
                "description": "Enable provider logging to get proxmox API logs\n"
            },
            "pmLogFile": {
                "type": "string",
                "description": "Write logs to this specific file\n"
            },
            "pmLogLevels": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "pulumi.json#/Any"
                },
                "description": "Configure the logging level to display; trace, debug, info, warn, etc\n"
            },
            "pmOtp": {
                "type": "string",
                "description": "OTP 2FA code (if required)\n"
            },
            "pmParallel": {
                "type": "integer"
            },
            "pmPassword": {
                "type": "string",
                "description": "Password to authenticate into proxmox\n"
            },
            "pmProxyServer": {
                "type": "string",
                "description": "Proxy Server passed to Api client(useful for debugging). Syntax: http://proxy:port\n"
            },
            "pmTimeout": {
                "type": "integer",
                "description": "How much second to wait for operations for both provider and api-client, default is 300s\n"
            },
            "pmTlsInsecure": {
                "type": "boolean",
                "description": "By default, every TLS connection is verified to be secure. This option allows terraform to proceed and operate on\nservers considered insecure. For example if you're connecting to a remote host and you do not have the CA cert that\nissued the proxmox api url's certificate.\n"
            },
            "pmUser": {
                "type": "string",
                "description": "Username e.g. myuser or myuser@pam\n"
            }
        },
        "requiredInputs": [
            "pmApiUrl"
        ]
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-proxmox/sdk/go/proxmox"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing proxmox cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-proxmox)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-proxmox` repo](https://github.com/pulumi/pulumi-proxmox/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-proxmox` repo](https://github.com/terraform-providers/terraform-provider-proxmox/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-proxmox)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-proxmox` repo](https://github.com/pulumi/pulumi-proxmox/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-proxmox` repo](https://github.com/terraform-providers/terraform-provider-proxmox/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}